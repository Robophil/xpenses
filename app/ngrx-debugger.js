"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var store_1 = require("@ngrx/store");
var effects_1 = require("@ngrx/effects");
var NgrxDebugger = (function () {
    function NgrxDebugger(store$, actions$) {
        this.store$ = store$;
        this.actions$ = actions$;
        this.show = false;
    }
    NgrxDebugger.prototype.ngOnInit = function () {
        var _this = this;
        this.Sub = this.actions$.do(function (action) { return console.log("ACTION: [ " + action.type + " ]"); })
            .subscribe();
        this.states$ = this.store$
            .distinctUntilChanged()
            .do(function (states) { return _this.states = states; })
            .map(function (states) { return Object.keys(states); });
    };
    NgrxDebugger.prototype.dump = function (state) {
        var debug;
        if (this.selected && this.states[this.selected][state])
            debug = this.states[this.selected][state];
        else
            debug = this.states[state];
        typeof debug == 'string' ? console.log(debug) : console.dir(debug);
    };
    NgrxDebugger.prototype.expand = function (state) {
        this.selected = this.selected == state ? false : state;
        this.expanded = this.selected && Object.keys(this.states[this.selected]);
    };
    NgrxDebugger.prototype.ngOnDestroy = function () {
        this.Sub.unsubscribe();
    };
    return NgrxDebugger;
}());
NgrxDebugger = __decorate([
    core_1.Component({
        selector: "ns-ngrx-debugger",
        template: "\n    <Label class=\"show\" (tap)=\"show = !show\" text=\"Show Debug Panel\"></Label>\n    <StackLayout *ngIf=\"show\">\n      <StackLayout *ngIf=\"states$ | async as states\">\n        <ListView [items]=\"states\" class=\"panel\">\n          <ng-template let-item=\"item\">\n            <GridLayout class=\"state\" columns=\"*, auto, auto\">\n              <Label class=\"info\" [text]=\"item\"></Label>\n              <Label col=\"1\" class=\"btn\" (tap)=\"dump(item)\" text=\"DUMP\" ></Label>\n              <Label col=\"2\" class=\"btn\" (tap)=\"expand(item)\" text=\"EXPAND\" ></Label>\n            </GridLayout>\n          </ng-template>\n        </ListView>\n        <StackLayout class=\"panel expanded\" *ngIf=\"expanded\">\n          <ListView [items]=\"expanded\">\n            <ng-template let-item=\"item\">\n              <GridLayout class=\"state\" columns=\"*, auto\">\n                <Label class=\"info\" [text]=\"item\"></Label>\n                <Label col=\"1\" class=\"btn\" (tap)=\"dump(item)\" text=\"DUMP\" ></Label>\n              </GridLayout>\n            </ng-template>\n          </ListView>\n        </StackLayout>\n      </StackLayout>\n    </StackLayout>\n  ",
        styles: ["\n    .show {\n      width: 100%;\n      color: darkgray;\n      padding: 5;\n      background-color: white;\n      text-align: center;\n      text-transform: uppercase;\n    }\n    .panel {\n      padding: 3;\n      background-color: #f6f6f6;\n    }\n    .panel .btn {\n      font-size: 12;\n      padding: 3;\n      color: darkgray;\n      border-width: 1;\n      border-color: #eee;\n    }\n    .panel .state {\n      padding: 5;\n      vertical-align: center;\n    }\n    .panel .state Label.info {\n      color: darkgray;\n      font-size: 13;\n      text-transform: uppercase;\n    }\n    .expanded {}\n    .expanded .state {\n      background-color: #eee;\n    }\n  "]
    }),
    __metadata("design:paramtypes", [store_1.Store, effects_1.Actions])
], NgrxDebugger);
exports.NgrxDebugger = NgrxDebugger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyeC1kZWJ1Z2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ncngtZGVidWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBaUY7QUFDakYscUNBQTRDO0FBQzVDLHlDQUF3QztBQW1FeEMsSUFBYSxZQUFZO0lBUXZCLHNCQUFvQixNQUFrQixFQUFVLFFBQWlCO1FBQTdDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRmpFLFNBQUksR0FBRyxLQUFLLENBQUM7SUFFc0QsQ0FBQztJQUVwRSwrQkFBUSxHQUFSO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQzthQUNwRixTQUFTLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU07YUFDdkIsb0JBQW9CLEVBQUU7YUFDdEIsRUFBRSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQXBCLENBQW9CLENBQUM7YUFDbEMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCwyQkFBSSxHQUFKLFVBQUssS0FBSztRQUNSLElBQUksS0FBSyxDQUFDO1FBQ1YsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSTtZQUNGLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTVCLE9BQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELDZCQUFNLEdBQU4sVUFBTyxLQUFLO1FBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELGtDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0M7QUF0Q1ksWUFBWTtJQS9EeEIsZ0JBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsUUFBUSxFQUFFLHdxQ0F5QlQ7UUFDRCxNQUFNLEVBQUUsQ0FBQyxtcUJBaUNSLENBQUM7S0FDSCxDQUFDO3FDQVM0QixhQUFLLEVBQXlCLGlCQUFPO0dBUnRELFlBQVksQ0FzQ3hCO0FBdENZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkluaXQsIFZpZXdDaGlsZCwgTmdab25lIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN0b3JlLCBBY3Rpb24gfSBmcm9tIFwiQG5ncngvc3RvcmVcIjtcbmltcG9ydCB7IEFjdGlvbnMgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibnMtbmdyeC1kZWJ1Z2dlclwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxMYWJlbCBjbGFzcz1cInNob3dcIiAodGFwKT1cInNob3cgPSAhc2hvd1wiIHRleHQ9XCJTaG93IERlYnVnIFBhbmVsXCI+PC9MYWJlbD5cbiAgICA8U3RhY2tMYXlvdXQgKm5nSWY9XCJzaG93XCI+XG4gICAgICA8U3RhY2tMYXlvdXQgKm5nSWY9XCJzdGF0ZXMkIHwgYXN5bmMgYXMgc3RhdGVzXCI+XG4gICAgICAgIDxMaXN0VmlldyBbaXRlbXNdPVwic3RhdGVzXCIgY2xhc3M9XCJwYW5lbFwiPlxuICAgICAgICAgIDxuZy10ZW1wbGF0ZSBsZXQtaXRlbT1cIml0ZW1cIj5cbiAgICAgICAgICAgIDxHcmlkTGF5b3V0IGNsYXNzPVwic3RhdGVcIiBjb2x1bW5zPVwiKiwgYXV0bywgYXV0b1wiPlxuICAgICAgICAgICAgICA8TGFiZWwgY2xhc3M9XCJpbmZvXCIgW3RleHRdPVwiaXRlbVwiPjwvTGFiZWw+XG4gICAgICAgICAgICAgIDxMYWJlbCBjb2w9XCIxXCIgY2xhc3M9XCJidG5cIiAodGFwKT1cImR1bXAoaXRlbSlcIiB0ZXh0PVwiRFVNUFwiID48L0xhYmVsPlxuICAgICAgICAgICAgICA8TGFiZWwgY29sPVwiMlwiIGNsYXNzPVwiYnRuXCIgKHRhcCk9XCJleHBhbmQoaXRlbSlcIiB0ZXh0PVwiRVhQQU5EXCIgPjwvTGFiZWw+XG4gICAgICAgICAgICA8L0dyaWRMYXlvdXQ+XG4gICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9MaXN0Vmlldz5cbiAgICAgICAgPFN0YWNrTGF5b3V0IGNsYXNzPVwicGFuZWwgZXhwYW5kZWRcIiAqbmdJZj1cImV4cGFuZGVkXCI+XG4gICAgICAgICAgPExpc3RWaWV3IFtpdGVtc109XCJleHBhbmRlZFwiPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC1pdGVtPVwiaXRlbVwiPlxuICAgICAgICAgICAgICA8R3JpZExheW91dCBjbGFzcz1cInN0YXRlXCIgY29sdW1ucz1cIiosIGF1dG9cIj5cbiAgICAgICAgICAgICAgICA8TGFiZWwgY2xhc3M9XCJpbmZvXCIgW3RleHRdPVwiaXRlbVwiPjwvTGFiZWw+XG4gICAgICAgICAgICAgICAgPExhYmVsIGNvbD1cIjFcIiBjbGFzcz1cImJ0blwiICh0YXApPVwiZHVtcChpdGVtKVwiIHRleHQ9XCJEVU1QXCIgPjwvTGFiZWw+XG4gICAgICAgICAgICAgIDwvR3JpZExheW91dD5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgPC9MaXN0Vmlldz5cbiAgICAgICAgPC9TdGFja0xheW91dD5cbiAgICAgIDwvU3RhY2tMYXlvdXQ+XG4gICAgPC9TdGFja0xheW91dD5cbiAgYCxcbiAgc3R5bGVzOiBbYFxuICAgIC5zaG93IHtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgY29sb3I6IGRhcmtncmF5O1xuICAgICAgcGFkZGluZzogNTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICB9XG4gICAgLnBhbmVsIHtcbiAgICAgIHBhZGRpbmc6IDM7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjZmNmY2O1xuICAgIH1cbiAgICAucGFuZWwgLmJ0biB7XG4gICAgICBmb250LXNpemU6IDEyO1xuICAgICAgcGFkZGluZzogMztcbiAgICAgIGNvbG9yOiBkYXJrZ3JheTtcbiAgICAgIGJvcmRlci13aWR0aDogMTtcbiAgICAgIGJvcmRlci1jb2xvcjogI2VlZTtcbiAgICB9XG4gICAgLnBhbmVsIC5zdGF0ZSB7XG4gICAgICBwYWRkaW5nOiA1O1xuICAgICAgdmVydGljYWwtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLnBhbmVsIC5zdGF0ZSBMYWJlbC5pbmZvIHtcbiAgICAgIGNvbG9yOiBkYXJrZ3JheTtcbiAgICAgIGZvbnQtc2l6ZTogMTM7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIH1cbiAgICAuZXhwYW5kZWQge31cbiAgICAuZXhwYW5kZWQgLnN0YXRlIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XG4gICAgfVxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3J4RGVidWdnZXIgaW1wbGVtZW50cyBPbkluaXQge1xuICBzdGF0ZXMkOiBPYnNlcnZhYmxlPGFueVtdPjtcbiAgc3RhdGVzOiBPYmplY3Q7XG4gIFN1YjogU3Vic2NyaXB0aW9uO1xuICBzZWxlY3RlZDogc3RyaW5nO1xuICBleHBhbmRlZDogT2JqZWN0O1xuICBzaG93ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yZSQ6IFN0b3JlPGFueT4sIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMpe31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLlN1YiA9IHRoaXMuYWN0aW9ucyQuZG8oKGFjdGlvbikgPT4gY29uc29sZS5sb2coXCJBQ1RJT046IFsgXCIgKyBhY3Rpb24udHlwZSArIFwiIF1cIikpXG4gICAgICAuc3Vic2NyaWJlKCk7XG5cbiAgICB0aGlzLnN0YXRlcyQgPSB0aGlzLnN0b3JlJFxuICAgICAgLmRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICAgIC5kbyhzdGF0ZXMgPT4gdGhpcy5zdGF0ZXMgPSBzdGF0ZXMpXG4gICAgICAubWFwKHN0YXRlcyA9PiBPYmplY3Qua2V5cyhzdGF0ZXMpKTtcbiAgfVxuXG4gIGR1bXAoc3RhdGUpIHtcbiAgICBsZXQgZGVidWc7XG4gICAgaWYodGhpcy5zZWxlY3RlZCAmJiB0aGlzLnN0YXRlc1t0aGlzLnNlbGVjdGVkXVtzdGF0ZV0pXG4gICAgICBkZWJ1ZyA9IHRoaXMuc3RhdGVzW3RoaXMuc2VsZWN0ZWRdW3N0YXRlXTtcbiAgICBlbHNlXG4gICAgICBkZWJ1ZyA9IHRoaXMuc3RhdGVzW3N0YXRlXVxuXG4gICAgdHlwZW9mIGRlYnVnID09ICdzdHJpbmcnID8gY29uc29sZS5sb2coZGVidWcpIDogY29uc29sZS5kaXIoZGVidWcpO1xuICB9XG5cbiAgZXhwYW5kKHN0YXRlKSB7XG4gICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQgPT0gc3RhdGUgPyBmYWxzZSA6IHN0YXRlO1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0aGlzLnNlbGVjdGVkICYmIE9iamVjdC5rZXlzKHRoaXMuc3RhdGVzW3RoaXMuc2VsZWN0ZWRdKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuU3ViLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cblxuIl19