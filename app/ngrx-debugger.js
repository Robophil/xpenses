"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var store_1 = require("@ngrx/store");
var effects_1 = require("@ngrx/effects");
var NgrxDebugger = (function () {
    function NgrxDebugger(store$, actions$) {
        this.store$ = store$;
        this.actions$ = actions$;
        this.show = false;
    }
    NgrxDebugger.prototype.ngOnInit = function () {
        var _this = this;
        this.Sub = this.actions$.do(function (action) { return console.log("ACTION: [ " + action.type + " ]"); })
            .subscribe();
        this.states$ = this.store$
            .distinctUntilChanged()
            .do(function (states) { return _this.states = states; })
            .map(function (states) { return Object.keys(states); });
    };
    NgrxDebugger.prototype.dump = function (state) {
        var debug;
        if (this.selected && this.states[this.selected][state])
            debug = this.states[this.selected][state];
        else
            debug = this.states[state];
        typeof debug == 'string' ? console.log(debug) : console.dir(debug);
    };
    NgrxDebugger.prototype.expand = function (state) {
        this.selected = this.selected == state ? false : state;
        this.expanded = this.selected && Object.keys(this.states[this.selected]);
    };
    NgrxDebugger.prototype.ngOnDestroy = function () {
        this.Sub.unsubscribe();
    };
    return NgrxDebugger;
}());
NgrxDebugger = __decorate([
    core_1.Component({
        selector: "nativescript-store-debugger",
        template: "\n    <Label class=\"show\" (tap)=\"show = !show\" text=\"Show Debug Panel\"></Label>\n    <StackLayout *ngIf=\"show\">\n      <StackLayout *ngIf=\"states$ | async as states\">\n        <ListView [items]=\"states\" class=\"panel\">\n          <ng-template let-item=\"item\">\n            <GridLayout class=\"state\" columns=\"*, auto, auto\">\n              <Label class=\"info\" [text]=\"item\"></Label>\n              <Label col=\"1\" class=\"btn\" (tap)=\"dump(item)\" text=\"DUMP\" ></Label>\n              <Label col=\"2\" class=\"btn\" (tap)=\"expand(item)\" text=\"EXPAND\" ></Label>\n            </GridLayout>\n          </ng-template>\n        </ListView>\n        <StackLayout class=\"panel expanded\" *ngIf=\"expanded\">\n          <ListView [items]=\"expanded\">\n            <ng-template let-item=\"item\">\n              <GridLayout class=\"state\" columns=\"*, auto\">\n                <Label class=\"info\" [text]=\"item\"></Label>\n                <Label col=\"1\" class=\"btn\" (tap)=\"dump(item)\" text=\"DUMP\" ></Label>\n              </GridLayout>\n            </ng-template>\n          </ListView>\n        </StackLayout>\n      </StackLayout>\n    </StackLayout>\n  ",
        styles: ["\n    .show {\n      width: 100%;\n      color: darkgray;\n      padding: 5;\n      background-color: white;\n      text-align: center;\n      text-transform: uppercase;\n    }\n    .panel {\n      padding: 3;\n      background-color: #f6f6f6;\n    }\n    .panel .btn {\n      font-size: 12;\n      padding: 3;\n      color: darkgray;\n      border-width: 1;\n      border-color: #eee;\n    }\n    .panel .state {\n      padding: 5;\n      vertical-align: center;\n    }\n    .panel .state Label.info {\n      color: darkgray;\n      font-size: 13;\n      text-transform: uppercase;\n    }\n    .expanded {}\n    .expanded .state {\n      background-color: #eee;\n    }\n  "]
    }),
    __metadata("design:paramtypes", [store_1.Store, effects_1.Actions])
], NgrxDebugger);
exports.NgrxDebugger = NgrxDebugger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdyeC1kZWJ1Z2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ncngtZGVidWdnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBaUY7QUFDakYscUNBQTRDO0FBQzVDLHlDQUF3QztBQW1FeEMsSUFBYSxZQUFZO0lBUXZCLHNCQUFvQixNQUFrQixFQUFVLFFBQWlCO1FBQTdDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBRmpFLFNBQUksR0FBRyxLQUFLLENBQUM7SUFFc0QsQ0FBQztJQUVwRSwrQkFBUSxHQUFSO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBOUMsQ0FBOEMsQ0FBQzthQUNwRixTQUFTLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU07YUFDdkIsb0JBQW9CLEVBQUU7YUFDdEIsRUFBRSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQXBCLENBQW9CLENBQUM7YUFDbEMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCwyQkFBSSxHQUFKLFVBQUssS0FBSztRQUNSLElBQUksS0FBSyxDQUFDO1FBQ1YsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSTtZQUNGLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRTVCLE9BQU8sS0FBSyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELDZCQUFNLEdBQU4sVUFBTyxLQUFLO1FBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELGtDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF0Q0QsSUFzQ0M7QUF0Q1ksWUFBWTtJQS9EeEIsZ0JBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsUUFBUSxFQUFFLHdxQ0F5QlQ7UUFDRCxNQUFNLEVBQUUsQ0FBQyxtcUJBaUNSLENBQUM7S0FDSCxDQUFDO3FDQVM0QixhQUFLLEVBQXlCLGlCQUFPO0dBUnRELFlBQVksQ0FzQ3hCO0FBdENZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkluaXQsIFZpZXdDaGlsZCwgTmdab25lIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFN0b3JlLCBBY3Rpb24gfSBmcm9tIFwiQG5ncngvc3RvcmVcIjtcbmltcG9ydCB7IEFjdGlvbnMgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibmF0aXZlc2NyaXB0LXN0b3JlLWRlYnVnZ2VyXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPExhYmVsIGNsYXNzPVwic2hvd1wiICh0YXApPVwic2hvdyA9ICFzaG93XCIgdGV4dD1cIlNob3cgRGVidWcgUGFuZWxcIj48L0xhYmVsPlxuICAgIDxTdGFja0xheW91dCAqbmdJZj1cInNob3dcIj5cbiAgICAgIDxTdGFja0xheW91dCAqbmdJZj1cInN0YXRlcyQgfCBhc3luYyBhcyBzdGF0ZXNcIj5cbiAgICAgICAgPExpc3RWaWV3IFtpdGVtc109XCJzdGF0ZXNcIiBjbGFzcz1cInBhbmVsXCI+XG4gICAgICAgICAgPG5nLXRlbXBsYXRlIGxldC1pdGVtPVwiaXRlbVwiPlxuICAgICAgICAgICAgPEdyaWRMYXlvdXQgY2xhc3M9XCJzdGF0ZVwiIGNvbHVtbnM9XCIqLCBhdXRvLCBhdXRvXCI+XG4gICAgICAgICAgICAgIDxMYWJlbCBjbGFzcz1cImluZm9cIiBbdGV4dF09XCJpdGVtXCI+PC9MYWJlbD5cbiAgICAgICAgICAgICAgPExhYmVsIGNvbD1cIjFcIiBjbGFzcz1cImJ0blwiICh0YXApPVwiZHVtcChpdGVtKVwiIHRleHQ9XCJEVU1QXCIgPjwvTGFiZWw+XG4gICAgICAgICAgICAgIDxMYWJlbCBjb2w9XCIyXCIgY2xhc3M9XCJidG5cIiAodGFwKT1cImV4cGFuZChpdGVtKVwiIHRleHQ9XCJFWFBBTkRcIiA+PC9MYWJlbD5cbiAgICAgICAgICAgIDwvR3JpZExheW91dD5cbiAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8L0xpc3RWaWV3PlxuICAgICAgICA8U3RhY2tMYXlvdXQgY2xhc3M9XCJwYW5lbCBleHBhbmRlZFwiICpuZ0lmPVwiZXhwYW5kZWRcIj5cbiAgICAgICAgICA8TGlzdFZpZXcgW2l0ZW1zXT1cImV4cGFuZGVkXCI+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgbGV0LWl0ZW09XCJpdGVtXCI+XG4gICAgICAgICAgICAgIDxHcmlkTGF5b3V0IGNsYXNzPVwic3RhdGVcIiBjb2x1bW5zPVwiKiwgYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxMYWJlbCBjbGFzcz1cImluZm9cIiBbdGV4dF09XCJpdGVtXCI+PC9MYWJlbD5cbiAgICAgICAgICAgICAgICA8TGFiZWwgY29sPVwiMVwiIGNsYXNzPVwiYnRuXCIgKHRhcCk9XCJkdW1wKGl0ZW0pXCIgdGV4dD1cIkRVTVBcIiA+PC9MYWJlbD5cbiAgICAgICAgICAgICAgPC9HcmlkTGF5b3V0PlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICA8L0xpc3RWaWV3PlxuICAgICAgICA8L1N0YWNrTGF5b3V0PlxuICAgICAgPC9TdGFja0xheW91dD5cbiAgICA8L1N0YWNrTGF5b3V0PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gICAgLnNob3cge1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBjb2xvcjogZGFya2dyYXk7XG4gICAgICBwYWRkaW5nOiA1O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIH1cbiAgICAucGFuZWwge1xuICAgICAgcGFkZGluZzogMztcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNmY2ZjY7XG4gICAgfVxuICAgIC5wYW5lbCAuYnRuIHtcbiAgICAgIGZvbnQtc2l6ZTogMTI7XG4gICAgICBwYWRkaW5nOiAzO1xuICAgICAgY29sb3I6IGRhcmtncmF5O1xuICAgICAgYm9yZGVyLXdpZHRoOiAxO1xuICAgICAgYm9yZGVyLWNvbG9yOiAjZWVlO1xuICAgIH1cbiAgICAucGFuZWwgLnN0YXRlIHtcbiAgICAgIHBhZGRpbmc6IDU7XG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgICAucGFuZWwgLnN0YXRlIExhYmVsLmluZm8ge1xuICAgICAgY29sb3I6IGRhcmtncmF5O1xuICAgICAgZm9udC1zaXplOiAxMztcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgfVxuICAgIC5leHBhbmRlZCB7fVxuICAgIC5leHBhbmRlZCAuc3RhdGUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAgICB9XG4gIGBdXG59KVxuZXhwb3J0IGNsYXNzIE5ncnhEZWJ1Z2dlciBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHN0YXRlcyQ6IE9ic2VydmFibGU8YW55W10+O1xuICBzdGF0ZXM6IE9iamVjdDtcbiAgU3ViOiBTdWJzY3JpcHRpb247XG4gIHNlbGVjdGVkOiBzdHJpbmc7XG4gIGV4cGFuZGVkOiBPYmplY3Q7XG4gIHNob3cgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JlJDogU3RvcmU8YW55PiwgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyl7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuU3ViID0gdGhpcy5hY3Rpb25zJC5kbygoYWN0aW9uKSA9PiBjb25zb2xlLmxvZyhcIkFDVElPTjogWyBcIiArIGFjdGlvbi50eXBlICsgXCIgXVwiKSlcbiAgICAgIC5zdWJzY3JpYmUoKTtcblxuICAgIHRoaXMuc3RhdGVzJCA9IHRoaXMuc3RvcmUkXG4gICAgICAuZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgLmRvKHN0YXRlcyA9PiB0aGlzLnN0YXRlcyA9IHN0YXRlcylcbiAgICAgIC5tYXAoc3RhdGVzID0+IE9iamVjdC5rZXlzKHN0YXRlcykpO1xuICB9XG5cbiAgZHVtcChzdGF0ZSkge1xuICAgIGxldCBkZWJ1ZztcbiAgICBpZih0aGlzLnNlbGVjdGVkICYmIHRoaXMuc3RhdGVzW3RoaXMuc2VsZWN0ZWRdW3N0YXRlXSlcbiAgICAgIGRlYnVnID0gdGhpcy5zdGF0ZXNbdGhpcy5zZWxlY3RlZF1bc3RhdGVdO1xuICAgIGVsc2VcbiAgICAgIGRlYnVnID0gdGhpcy5zdGF0ZXNbc3RhdGVdXG5cbiAgICB0eXBlb2YgZGVidWcgPT0gJ3N0cmluZycgPyBjb25zb2xlLmxvZyhkZWJ1ZykgOiBjb25zb2xlLmRpcihkZWJ1Zyk7XG4gIH1cblxuICBleHBhbmQoc3RhdGUpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZCA9PSBzdGF0ZSA/IGZhbHNlIDogc3RhdGU7XG4gICAgdGhpcy5leHBhbmRlZCA9IHRoaXMuc2VsZWN0ZWQgJiYgT2JqZWN0LmtleXModGhpcy5zdGF0ZXNbdGhpcy5zZWxlY3RlZF0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5TdWIudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuXG4iXX0=