"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var store_1 = require("@ngrx/store");
var effects_1 = require("@ngrx/effects");
var Observable_1 = require("rxjs/Observable");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
require("rxjs/add/operator/map");
require("rxjs/add/operator/do");
require("rxjs/add/operator/distinctUntilChanged");
require("rxjs/add/operator/debounceTime");
require("rxjs/add/operator/scan");
var NgrxDebugger = (function () {
    function NgrxDebugger(store$, actions) {
        this.store$ = store$;
        this.states = {};
        this.expanded = [];
        this.pan$ = new BehaviorSubject_1.BehaviorSubject({ top: 0, left: 300 });
        this.hidden = false;
        this.actions$ = actions.do(function (_a) {
            var type = _a.type;
            return console.log('[ACTION] ' + type);
        });
    }
    NgrxDebugger.prototype.ngOnInit = function () {
        var _this = this;
        this.position$ = Observable_1.Observable.from(this.pan$)
            .debounceTime(50)
            .scan(function (position, _a) {
            var top = _a.top, left = _a.left;
            return ({ top: position.top + top, left: position.left + left });
        });
        this.states$ = this.store$
            .distinctUntilChanged()
            .do(function (states) { return _this.states = states; })
            .map(function (states) { return Object.keys(states); });
    };
    NgrxDebugger.prototype.onDump = function (state) {
        var debug;
        if (this.selected && this.states[this.selected][state])
            debug = this.states[this.selected][state];
        else
            debug = this.states[state];
        typeof debug == 'string' ? console.log(debug) : console.dir(debug);
    };
    NgrxDebugger.prototype.onExpand = function (state) {
        this.selected = this.selected == state ? false : state;
        this.expanded = this.selected && Object.keys(this.states[this.selected]);
    };
    NgrxDebugger.prototype.ngOnDestroy = function () {
    };
    return NgrxDebugger;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], NgrxDebugger.prototype, "hidden", void 0);
NgrxDebugger = __decorate([
    core_1.Component({
        selector: "ns-ngrx-debugger",
        // </ng-container>
        template: "\n    <ng-container *ngIf=\"hidden == false\">\n      <AbsoluteLayout *ngIf=\"actions$ | async\">\n\n        <ng-container *ngIf=\"position$ | async as position\">\n          <Button (pan)=\"pan$.next({ top: $event.deltaY, left: $event.deltaX })\" class=\"toggle\" [top]=\"position.top\" [left]=\"position.left\" (tap)=\"toggle = !toggle\" text=\"!\"></Button>\n        </ng-container>\n\n        <ScrollView width=\"100%\" height=\"100%\" padding=\"10 0\" *ngIf=\"states$ | async as states\">\n          <StackLayout class=\"container\" *ngIf=\"toggle\">\n            <ListView [items]=\"states\" class=\"panel\">\n              <ng-template let-item=\"item\">\n                <GridLayout class=\"state\" columns=\"*, auto, auto\">\n                  <Label [text]=\"item\"></Label>\n                  <Button col=\"1\" (tap)=\"onExpand(item)\" text=\"expand\"></Button>\n                  <Button col=\"2\" (tap)=\"onDump(item)\" text=\"dump\"></Button>\n                </GridLayout>\n              </ng-template>\n            </ListView>\n\n            <ListView [items]=\"expanded\" class=\"panel expanded\">\n              <ng-template let-item=\"item\">\n                <GridLayout class=\"state\" columns=\"*, auto\">\n                  <Label [text]=\"item\"></Label>\n                  <Button col=\"1\" (tap)=\"onDump(item)\" text=\"dump\"></Button>\n                </GridLayout>\n              </ng-template>\n            </ListView>\n          </StackLayout>\n        </ScrollView>\n\n      </AbsoluteLayout>\n    </ng-container>\n  ",
        styles: ["\n    .toggle {\n      border-radius: 200;\n      height: 50;\n      width: 50;\n      font-weight: bold;\n      font-size: 20;\n      border-color: whitesmoke;\n      z-index: 2;\n      opacity: .85;\n    }\n    Button {\n      font-size: 11;\n      padding: 3px;\n      text-align: center;\n      color: white;\n      text-transform: uppercase;\n      height: 30;\n      width: auto;\n      border-width: 1;\n      border-color: #484c55;\n      background-color: #4f5a66;\n    }\n    .container {\n      background-color: rgba(42, 47, 59, 0.85);\n      z-index: 1;\n      height: 100%;\n    }\n    .panel { padding: 3; }\n    .panel .state {\n      padding: 5;\n      vertical-align: center;\n    }\n    .panel .state Label {\n      color: white;\n      font-size: 13;\n      vertical-align: center;\n      text-transform: uppercase;\n    }\n    .expanded { padding-left: 4 }\n    .expanded .state { background-color: #484c55; }\n    "]
    }),
    __metadata("design:paramtypes", [store_1.Store, effects_1.Actions])
], NgrxDebugger);
exports.NgrxDebugger = NgrxDebugger;
//# sourceMappingURL=data:application/json;base64,