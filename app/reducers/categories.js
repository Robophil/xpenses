"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var categories_action_1 = require("../actions/categories.action");
var initialState = {
    selected: '',
    count: 0,
    date: new Date,
    status: false,
    ids: [],
    data: null,
};
// Reducer
function categories(state, _a) {
    if (state === void 0) { state = initialState; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case categories_action_1.CategoriesActions.SELECT: { }
        case categories_action_1.CategoriesActions.CREATE_COMPLETE: {
            var data = Object.assign({}, state.data, (_b = {}, _b[payload.id] = payload, _b));
            var ids = [payload.id].concat(state.ids);
            return Object.assign({}, state, { date: payload.date, selected: payload.id, status: true, ids: ids, data: data });
        }
        case categories_action_1.CategoriesActions.INIT_COMPLETE: {
            var ids = payload.map(function (data) { return data.id; });
            var data = _.mapKeys(payload, 'id');
            return Object.assign({}, state, { status: false, count: ids.length, ids: ids, data: data });
        }
        default: return state;
    }
    var _b;
}
exports.categories = categories;
;
// Selectors
function getIds() {
    return function (diary$) { return diary$.map(function (t) { return t.ids; }).filter(function (ids) { return !!ids; }); };
}
exports.getIds = getIds;
function getData(ids) {
    return function (diary$) { return diary$
        .map(function (t) { return t.data; })
        .filter(function (data) { return data !== null; })
        .map(function (data) { return ids.map(function (id) { return data[id]; }); }); };
}
exports.getData = getData;
function getSelectedId() {
    return function (diary$) { return diary$.map(function (t) { return t.selected; }).filter(function (s) { return !!s.length; }); };
}
exports.getSelectedId = getSelectedId;
function getSelectedDate() {
    return function (diary$) { return diary$.map(function (t) { return t.date; }); };
}
exports.getSelectedDate = getSelectedDate;
function getSelected() {
    return function (diary$) { return diary$.filter(function (s) { return !!s.ids.length; }).map(function (t) { return t.data[t.selected]; }); };
}
exports.getSelected = getSelected;
function getCount() {
    return function (diary$) { return diary$.map(function (t) { return t.count; }); };
}
exports.getCount = getCount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcmllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNhdGVnb3JpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwwQkFBNEI7QUFHNUIsa0VBQWlFO0FBWWpFLElBQU0sWUFBWSxHQUFvQjtJQUNwQyxRQUFRLEVBQUUsRUFBRTtJQUNaLEtBQUssRUFBRSxDQUFDO0lBQ1IsSUFBSSxFQUFFLElBQUksSUFBSTtJQUNkLE1BQU0sRUFBRSxLQUFLO0lBQ2IsR0FBRyxFQUFFLEVBQUU7SUFDUCxJQUFJLEVBQUUsSUFBSTtDQUNYLENBQUE7QUFFRCxVQUFVO0FBQ1Ysb0JBQTJCLEtBQXFDLEVBQUUsRUFBeUI7SUFBaEUsc0JBQUEsRUFBQSxvQkFBcUM7UUFBSSxjQUFJLEVBQUUsb0JBQU87SUFDL0UsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNiLEtBQUsscUNBQWlCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWxDLEtBQUsscUNBQWlCLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdkMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksWUFBSSxHQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUcsT0FBTyxNQUFHLENBQUM7WUFDdEUsSUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsU0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxLQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQyxDQUFDO1FBQ3pHLENBQUM7UUFFRCxLQUFLLHFDQUFpQixDQUFDLGFBQWEsRUFBRSxD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IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3RvcmUsIEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ2F0ZWdvcmllc01vZGVsIH0gZnJvbSAnLi4vbW9kZWxzL2NhdGVnb3J5Lm1vZGVsJztcbmltcG9ydCB7IENhdGVnb3JpZXNBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9jYXRlZ29yaWVzLmFjdGlvbic7XG5cbmV4cG9ydCB0eXBlIENhdGVnb3JpZXNEYXRhID0geyBbaWQ6IG51bWJlcl06IENhdGVnb3JpZXNNb2RlbCB9O1xuZXhwb3J0IGludGVyZmFjZSBDYXRlZ29yaWVzU3RhdGUge1xuICBzZWxlY3RlZDogc3RyaW5nO1xuICBkYXRlOiBEYXRlO1xuICBzdGF0dXM6IGJvb2xlYW47XG4gIGlkczogbnVtYmVyW107XG4gIGRhdGE6IENhdGVnb3JpZXNEYXRhO1xuICBjb3VudDogbnVtYmVyO1xufVxuXG5jb25zdCBpbml0aWFsU3RhdGU6IENhdGVnb3JpZXNTdGF0ZSA9IHtcbiAgc2VsZWN0ZWQ6ICcnLFxuICBjb3VudDogMCxcbiAgZGF0ZTogbmV3IERhdGUsXG4gIHN0YXR1czogZmFsc2UsXG4gIGlkczogW10sXG4gIGRhdGE6IG51bGwsXG59XG5cbi8vIFJlZHVjZXJcbmV4cG9ydCBmdW5jdGlvbiBjYXRlZ29yaWVzKHN0YXRlOiBDYXRlZ29yaWVzU3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9OiBBY3Rpb24pOiBDYXRlZ29yaWVzU3RhdGUge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIENhdGVnb3JpZXNBY3Rpb25zLlNFTEVDVDogeyB9XG5cbiAgICBjYXNlIENhdGVnb3JpZXNBY3Rpb25zLkNSRUFURV9DT01QTEVURToge1xuICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmRhdGEsIHsgW3BheWxvYWQuaWRdOiBwYXlsb2FkIH0pO1xuICAgICAgY29uc3QgaWRzID0gW3BheWxvYWQuaWQsIC4uLnN0YXRlLmlkc107XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgZGF0ZTogcGF5bG9hZC5kYXRlLCBzZWxlY3RlZDogcGF5bG9hZC5pZCwgc3RhdHVzOiB0cnVlLCBpZHMsIGRhdGEgfSk7XG4gICAgfVxuXG4gICAgY2FzZSBDYXRlZ29yaWVzQWN0aW9ucy5JTklUX0NPTVBMRVRFOiB7XG4gICAgICBjb25zdCBpZHMgPSBwYXlsb2FkLm1hcChkYXRhID0+IGRhdGEuaWQpO1xuICAgICAgY29uc3QgZGF0YSA9IF8ubWFwS2V5cyhwYXlsb2FkLCAnaWQnKSBhcyBDYXRlZ29yaWVzRGF0YTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IHN0YXR1czogZmFsc2UsIGNvdW50OiBpZHMubGVuZ3RoLCBpZHMsIGRhdGEgfSk7XG4gICAgfVxuXG4gICAgZGVmYXVsdDogcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5cbi8vIFNlbGVjdG9yc1xuZXhwb3J0IGZ1bmN0aW9uIGdldElkcygpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q2F0ZWdvcmllc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuaWRzKS5maWx0ZXIoaWRzID0+ICEhaWRzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhKGlkcykge1xuICByZXR1cm4gKGRpYXJ5JDogT2JzZXJ2YWJsZTxDYXRlZ29yaWVzU3RhdGU+KSA9PiBkaWFyeSRcbiAgICAubWFwKHQgPT4gdC5kYXRhKVxuICAgIC5maWx0ZXIoZGF0YSA9PiBkYXRhICE9PSBudWxsKVxuICAgIC5tYXAoZGF0YSA9PiBpZHMubWFwKGlkID0+IGRhdGFbaWRdKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0ZWRJZCgpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q2F0ZWdvcmllc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuc2VsZWN0ZWQpLmZpbHRlcihzID0+ICEhcy5sZW5ndGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGVkRGF0ZSgpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q2F0ZWdvcmllc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuZGF0ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VsZWN0ZWQoKSB7XG4gIHJldHVybiAoZGlhcnkkOiBPYnNlcnZhYmxlPENhdGVnb3JpZXNTdGF0ZT4pID0+IGRpYXJ5JC5maWx0ZXIocyA9PiAhIXMuaWRzLmxlbmd0aCkubWFwKHQgPT4gdC5kYXRhW3Quc2VsZWN0ZWRdKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb3VudCgpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q2F0ZWdvcmllc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuY291bnQpO1xufVxuIl19