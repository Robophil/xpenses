"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("@ngrx/store");
var store_2 = require("@ngrx/store");
var core_1 = require("@ngrx/core");
var Cycles = require("./cycles");
var environment_1 = require("../environments/environment");
exports.reducers = {
    test: function () {
        return { a: 'hey' + Math.floor(Math.random() * 1000) };
    },
    cycles: Cycles.cycles,
};
;
var prod = store_2.combineReducers(exports.reducers);
var dev = core_1.compose(store_2.combineReducers)(exports.reducers);
function redux(state, action) {
    return environment_1.environment.production ? prod(state, action) : dev(state, action);
}
exports.redux = redux;
exports.STORE = [
    store_1.StoreModule.provideStore(redux),
];
// Selectors
function getCycles() {
    return function (state$) { return state$.select(function (s) { return s.cycles; }); };
}
exports.getCycles = getCycles;
function getCyclesIds() {
    return core_1.compose(Cycles.getIds(), getCycles());
}
exports.getCyclesIds = getCyclesIds;
function getCyclesSelectedId() {
    return core_1.compose(Cycles.getSelectedId(), getCycles());
}
exports.getCyclesSelectedId = getCyclesSelectedId;
function getCyclesSelectedDate() {
    return core_1.compose(Cycles.getSelectedDate(), getCycles());
}
exports.getCyclesSelectedDate = getCyclesSelectedDate;
function getCyclesDataRaw() {
    return function (state$) { return state$.select(function (s) { return s.cycles.data; }); };
}
exports.getCyclesDataRaw = getCyclesDataRaw;
function getCyclesData() {
    return function (state$) { return state$
        .let(getCyclesIds())
        .switchMap(function (ids) { return state$.let(core_1.compose(Cycles.getData(ids), getCycles())); }); };
}
exports.getCyclesData = getCyclesData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4RDtBQUk5RCxxQ0FBOEM7QUFDOUMsbUNBQXFDO0FBQ3JDLGlDQUFtQztBQUNuQywyREFBMEQ7QUFFN0MsUUFBQSxRQUFRLEdBQUc7SUFDdEIsSUFBSSxFQUFFO1FBQ0osTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBQyxJQUFJLENBQUMsRUFBRSxDQUFBO0lBQ3BELENBQUM7SUFDRCxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07Q0FDdEIsQ0FBQztBQUtELENBQUM7QUFFRixJQUFNLElBQUksR0FBRyx1QkFBZSxDQUFDLGdCQUFRLENBQUMsQ0FBQztBQUN2QyxJQUFNLEdBQUcsR0FBRyxjQUFPLENBQUMsdUJBQWUsQ0FBQyxDQUFDLGdCQUFRLENBQUMsQ0FBQztBQUMvQyxlQUFzQixLQUFVLEVBQUUsTUFBVztJQUMzQyxNQUFNLENBQUMseUJBQVcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFGRCxzQkFFQztBQUVZLFFBQUEsS0FBSyxHQUFHO0lBQ25CLG1CQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztDQUNoQyxDQUFDO0FBRUYsWUFBWTtBQUNaO0lBQ0UsTUFBTSxDQUFDLFVBQUMsTUFBbUIsSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxFQUE1QixDQUE0QixDQUFDO0FBQy9ELENBQUM7QUFGRCw4QkFFQztBQUNEO0lBQ0UsTUFBTSxDQUFDLGNBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBRkQsb0NBRUM7QUFDRDtJQUNFLE1BQU0sQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELGtEQUVDO0FBQ0Q7SUFDRSxNQUFNLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFGRCxzREFFQztBQUNEO0lBQ0UsTUFBTSxDQUFDLFVBQUMsTUFBbUIsSUFBSyxPQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBYixDQUFhLENBQUMsRUFBakMsQ0FBaUMsQ0FBQztBQUNwRSxDQUFDO0FBRkQsNENBRUM7QUFDRDtJQUNFLE1BQU0sQ0FBQyxVQUFDLE1BQW1CLElBQUssT0FBQSxNQUFNO1NBQ25DLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNuQixTQUFTLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBckQsQ0FBcUQsQ0FBQyxFQUYxQyxDQUUwQyxDQUFDO0FBQzdFLENBQUM7QUFKRCxzQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIGFzIFMsIFN0b3JlTW9kdWxlLCBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBTdG9yZURldnRvb2xzTW9kdWxlIH0gZnJvbSAnQG5ncngvc3RvcmUtZGV2dG9vbHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdAbmdyeC9jb3JlJztcbmltcG9ydCAqIGFzIEN5Y2xlcyBmcm9tICcuL2N5Y2xlcyc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gJy4uL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudCc7XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VycyA9IHtcbiAgdGVzdDogKCkgPT4ge1xuICAgIHJldHVybiB7IGE6ICdoZXknK01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAwKSB9XG4gIH0sXG4gIGN5Y2xlczogQ3ljbGVzLmN5Y2xlcyxcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwU3RhdGUge1xuICB0ZXN0OiBPYmplY3Q7XG4gIGN5Y2xlczogQ3ljbGVzLkN5Y2xlc1N0YXRlO1xufTtcblxuY29uc3QgcHJvZCA9IGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycyk7XG5jb25zdCBkZXYgPSBjb21wb3NlKGNvbWJpbmVSZWR1Y2VycykocmVkdWNlcnMpO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZHV4KHN0YXRlOiBhbnksIGFjdGlvbjogYW55KSB7XG4gIHJldHVybiBlbnZpcm9ubWVudC5wcm9kdWN0aW9uID8gcHJvZChzdGF0ZSwgYWN0aW9uKSA6IGRldihzdGF0ZSwgYWN0aW9uKTtcbn1cblxuZXhwb3J0IGNvbnN0IFNUT1JFID0gW1xuICBTdG9yZU1vZHVsZS5wcm92aWRlU3RvcmUocmVkdXgpLFxuXTtcblxuLy8gU2VsZWN0b3JzXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzKCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJC5zZWxlY3QocyA9PiBzLmN5Y2xlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzSWRzKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0SWRzKCksIGdldEN5Y2xlcygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNTZWxlY3RlZElkKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0U2VsZWN0ZWRJZCgpLCBnZXRDeWNsZXMoKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzU2VsZWN0ZWREYXRlKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0U2VsZWN0ZWREYXRlKCksIGdldEN5Y2xlcygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNEYXRhUmF3KCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJC5zZWxlY3QocyA9PiBzLmN5Y2xlcy5kYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNEYXRhKCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJFxuICAgIC5sZXQoZ2V0Q3ljbGVzSWRzKCkpXG4gICAgLnN3aXRjaE1hcChpZHMgPT4gc3RhdGUkLmxldChjb21wb3NlKEN5Y2xlcy5nZXREYXRhKGlkcyksIGdldEN5Y2xlcygpKSkpO1xufVxuIl19