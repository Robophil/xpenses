"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("@ngrx/store");
var store_devtools_1 = require("@ngrx/store-devtools");
var ngrx_devtools_nativescript_1 = require("ngrx-devtools-nativescript");
var store_2 = require("@ngrx/store");
var core_1 = require("@ngrx/core");
var Cycles = require("./cycles");
var environment_1 = require("../environments/environment");
exports.reducers = {
    test: function () {
        return { a: 'hey' + Math.floor(Math.random() * 1000) };
    },
    cycles: Cycles.cycles,
};
;
var prod = store_2.combineReducers(exports.reducers);
var dev = core_1.compose(store_2.combineReducers)(exports.reducers);
function redux(state, action) {
    return environment_1.environment.production ? prod(state, action) : dev(state, action);
}
exports.redux = redux;
exports.STORE = [
    ngrx_devtools_nativescript_1.NativeScriptDevToolsMonitors,
    store_1.StoreModule.provideStore(redux),
    store_devtools_1.StoreDevtoolsModule.instrumentStore(),
];
// Selectors
function getCycles() {
    return function (state$) { return state$.select(function (s) { return s.cycles; }); };
}
exports.getCycles = getCycles;
function getCyclesIds() {
    return core_1.compose(Cycles.getIds(), getCycles());
}
exports.getCyclesIds = getCyclesIds;
function getCyclesSelectedId() {
    return core_1.compose(Cycles.getSelectedId(), getCycles());
}
exports.getCyclesSelectedId = getCyclesSelectedId;
function getCyclesSelectedDate() {
    return core_1.compose(Cycles.getSelectedDate(), getCycles());
}
exports.getCyclesSelectedDate = getCyclesSelectedDate;
function getCyclesDataRaw() {
    return function (state$) { return state$.select(function (s) { return s.cycles.data; }); };
}
exports.getCyclesDataRaw = getCyclesDataRaw;
function getCyclesData() {
    return function (state$) { return state$
        .let(getCyclesIds())
        .switchMap(function (ids) { return state$.let(core_1.compose(Cycles.getData(ids), getCycles())); }); };
}
exports.getCyclesData = getCyclesData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4RDtBQUM5RCx1REFBMkQ7QUFFM0QseUVBQTBFO0FBRTFFLHFDQUE4QztBQUM5QyxtQ0FBcUM7QUFDckMsaUNBQW1DO0FBQ25DLDJEQUEwRDtBQUU3QyxRQUFBLFFBQVEsR0FBRztJQUN0QixJQUFJLEVBQUU7UUFDSixNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFDLElBQUksQ0FBQyxFQUFFLENBQUE7SUFDcEQsQ0FBQztJQUNELE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtDQUN0QixDQUFDO0FBS0QsQ0FBQztBQUVGLElBQU0sSUFBSSxHQUFHLHVCQUFlLENBQUMsZ0JBQVEsQ0FBQyxDQUFDO0FBQ3ZDLElBQU0sR0FBRyxHQUFHLGNBQU8sQ0FBQyx1QkFBZSxDQUFDLENBQUMsZ0JBQVEsQ0FBQyxDQUFDO0FBQy9DLGVBQXNCLEtBQVUsRUFBRSxNQUFXO0lBQzNDLE1BQU0sQ0FBQyx5QkFBVyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUZELHNCQUVDO0FBRVksUUFBQSxLQUFLLEdBQUc7SUFDbkIseURBQTRCO0lBQzVCLG1CQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUMvQixvQ0FBbUIsQ0FBQyxlQUFlLEVBQUU7Q0FFdEMsQ0FBQztBQUVGLFlBQVk7QUFDWjtJQUNFLE1BQU0sQ0FBQyxVQUFDLE1BQW1CLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sRUFBUixDQUFRLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQztBQUMvRCxDQUFDO0FBRkQsOEJBRUM7QUFDRDtJQUNFLE1BQU0sQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELG9DQUVDO0FBQ0Q7SUFDRSxNQUFNLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCxrREFFQztBQUNEO0lBQ0UsTUFBTSxDQUFDLGNBQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRkQsc0RBRUM7QUFDRDtJQUNFLE1BQU0sQ0FBQyxVQUFDLE1BQW1CLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQWIsQ0FBYSxDQUFDLEVBQWpDLENBQWlDLENBQUM7QUFDcEUsQ0FBQztBQUZELDRDQUVDO0FBQ0Q7SUFDRSxNQUFNLENBQUMsVUFBQyxNQUFtQixJQUFLLE9BQUEsTUFBTTtTQUNuQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDbkIsU0FBUyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQXJELENBQXFELENBQUMsRUFGMUMsQ0FFMEMsQ0FBQztBQUM3RSxDQUFDO0FBSkQsc0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSBhcyBTLCBTdG9yZU1vZHVsZSwgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgU3RvcmVEZXZ0b29sc01vZHVsZSB9IGZyb20gJ0BuZ3J4L3N0b3JlLWRldnRvb2xzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0RGV2VG9vbHNNb25pdG9ycyB9IGZyb20gXCJuZ3J4LWRldnRvb2xzLW5hdGl2ZXNjcmlwdFwiO1xuXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnQG5ncngvY29yZSc7XG5pbXBvcnQgKiBhcyBDeWNsZXMgZnJvbSAnLi9jeWNsZXMnO1xuaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xuXG5leHBvcnQgY29uc3QgcmVkdWNlcnMgPSB7XG4gIHRlc3Q6ICgpID0+IHtcbiAgICByZXR1cm4geyBhOiAnaGV5JytNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTAwMCkgfVxuICB9LFxuICBjeWNsZXM6IEN5Y2xlcy5jeWNsZXMsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAgdGVzdDogT2JqZWN0O1xuICBjeWNsZXM6IEN5Y2xlcy5DeWNsZXNTdGF0ZTtcbn07XG5cbmNvbnN0IHByb2QgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpO1xuY29uc3QgZGV2ID0gY29tcG9zZShjb21iaW5lUmVkdWNlcnMpKHJlZHVjZXJzKTtcbmV4cG9ydCBmdW5jdGlvbiByZWR1eChzdGF0ZTogYW55LCBhY3Rpb246IGFueSkge1xuICByZXR1cm4gZW52aXJvbm1lbnQucHJvZHVjdGlvbiA/IHByb2Qoc3RhdGUsIGFjdGlvbikgOiBkZXYoc3RhdGUsIGFjdGlvbik7XG59XG5cbmV4cG9ydCBjb25zdCBTVE9SRSA9IFtcbiAgTmF0aXZlU2NyaXB0RGV2VG9vbHNNb25pdG9ycyxcbiAgU3RvcmVNb2R1bGUucHJvdmlkZVN0b3JlKHJlZHV4KSxcbiAgU3RvcmVEZXZ0b29sc01vZHVsZS5pbnN0cnVtZW50U3RvcmUoKSxcbiAgLy8gU3RvcmVEZXZ0b29sc01vZHVsZS5pbnN0cnVtZW50U3RvcmUoKVxuXTtcblxuLy8gU2VsZWN0b3JzXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzKCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJC5zZWxlY3QocyA9PiBzLmN5Y2xlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzSWRzKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0SWRzKCksIGdldEN5Y2xlcygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNTZWxlY3RlZElkKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0U2VsZWN0ZWRJZCgpLCBnZXRDeWNsZXMoKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ljbGVzU2VsZWN0ZWREYXRlKCkge1xuICByZXR1cm4gY29tcG9zZShDeWNsZXMuZ2V0U2VsZWN0ZWREYXRlKCksIGdldEN5Y2xlcygpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNEYXRhUmF3KCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJC5zZWxlY3QocyA9PiBzLmN5Y2xlcy5kYXRhKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRDeWNsZXNEYXRhKCkge1xuICByZXR1cm4gKHN0YXRlJDogUzxBcHBTdGF0ZT4pID0+IHN0YXRlJFxuICAgIC5sZXQoZ2V0Q3ljbGVzSWRzKCkpXG4gICAgLnN3aXRjaE1hcChpZHMgPT4gc3RhdGUkLmxldChjb21wb3NlKEN5Y2xlcy5nZXREYXRhKGlkcyksIGdldEN5Y2xlcygpKSkpO1xufVxuIl19