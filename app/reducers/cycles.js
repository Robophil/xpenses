"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var cycles_action_1 = require("../actions/cycles.action");
var initialState = {
    selected: '',
    count: 0,
    date: new Date,
    status: false,
    ids: [],
    data: null,
};
function cycle(state, _a) {
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case cycles_action_1.CyclesActions.ADD_CATEGORY_COMPLETE: {
            var categories = [payload].concat(state.categories);
            return Object.assign({}, state, { categories: categories });
        }
    }
}
exports.cycle = cycle;
// Reducer
function cycles(state, _a) {
    if (state === void 0) { state = initialState; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case cycles_action_1.CyclesActions.SELECT: { }
        case cycles_action_1.CyclesActions.ADD_CATEGORY_COMPLETE: {
            var selected = state.data[payload.id];
            var update = cycle(selected, { type: cycles_action_1.CyclesActions.ADD_CATEGORY_COMPLETE, payload: payload.category });
            var data = Object.assign({}, state.data, (_b = {}, _b[payload.id] = update, _b));
            return Object.assign({}, state, { data: data });
        }
        case cycles_action_1.CyclesActions.CREATE_COMPLETE: {
            var data = Object.assign({}, state.data, (_c = {}, _c[payload.id] = payload, _c));
            var ids = [payload.id].concat(state.ids);
            return Object.assign({}, state, { date: payload.date, selected: payload.id, status: true, ids: ids, data: data });
        }
        case cycles_action_1.CyclesActions.INIT_COMPLETE: {
            var ids = payload.map(function (data) { return data.id; });
            var data = _.mapKeys(payload, 'id');
            return Object.assign({}, state, { status: false, count: ids.length, ids: ids, data: data });
        }
        default: return state;
    }
    var _b, _c;
}
exports.cycles = cycles;
;
// Selectors
function getIds() {
    return function (diary$) { return diary$.map(function (t) { return t.ids; }).filter(function (ids) { return !!ids; }); };
}
exports.getIds = getIds;
function getData(ids) {
    return function (diary$) { return diary$
        .map(function (t) { return t.data; })
        .filter(function (data) { return data !== null; })
        .map(function (data) { return ids.map(function (id) { return data[id]; }); }); };
}
exports.getData = getData;
function getSelectedId() {
    return function (diary$) { return diary$.map(function (t) { return t.selected; }).filter(function (s) { return !!s.length; }); };
}
exports.getSelectedId = getSelectedId;
function getSelectedDate() {
    return function (diary$) { return diary$.map(function (t) { return t.date; }); };
}
exports.getSelectedDate = getSelectedDate;
function getSelected() {
    return function (diary$) { return diary$.filter(function (s) { return !!s.ids.length; }).map(function (t) { return t.data[t.selected]; }); };
}
exports.getSelected = getSelected;
function getCount() {
    return function (diary$) { return diary$.map(function (t) { return t.count; }); };
}
exports.getCount = getCount;
//# sourceMappingURL=data:application/json;base64,