"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var cycles_action_1 = require("../actions/cycles.action");
var initialState = {
    selected: '',
    count: 0,
    date: new Date,
    status: false,
    ids: [],
    data: null,
};
// Reducer
function cycles(state, _a) {
    if (state === void 0) { state = initialState; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case cycles_action_1.CyclesActions.SELECT: { }
        case cycles_action_1.CyclesActions.CREATE_COMPLETE: {
            var data = Object.assign({}, state.data, (_b = {}, _b[payload.id] = payload, _b));
            var ids = [payload.id].concat(state.ids);
            return Object.assign({}, state, { date: payload.date, selected: payload.id, status: true, ids: ids, data: data });
        }
        case cycles_action_1.CyclesActions.INIT_COMPLETE: {
            var ids = payload.map(function (data) { return data.id; });
            var data = _.mapKeys(payload, 'id');
            return Object.assign({}, state, { status: false, count: ids.length, ids: ids, data: data });
        }
        default: return state;
    }
    var _b;
}
exports.cycles = cycles;
;
// Selectors
function getIds() {
    return function (diary$) { return diary$.map(function (t) { return t.ids; }).filter(function (ids) { return !!ids; }); };
}
exports.getIds = getIds;
function getData(ids) {
    return function (diary$) { return diary$
        .map(function (t) { return t.data; })
        .filter(function (data) { return data !== null; })
        .map(function (data) { return ids.map(function (id) { return data[id]; }); }); };
}
exports.getData = getData;
function getSelectedId() {
    return function (diary$) { return diary$.map(function (t) { return t.selected; }).filter(function (s) { return !!s.length; }); };
}
exports.getSelectedId = getSelectedId;
function getSelectedDate() {
    return function (diary$) { return diary$.map(function (t) { return t.date; }); };
}
exports.getSelectedDate = getSelectedDate;
function getSelected() {
    return function (diary$) { return diary$.filter(function (s) { return !!s.ids.length; }).map(function (t) { return t.data[t.selected]; }); };
}
exports.getSelected = getSelected;
function getCount() {
    return function (diary$) { return diary$.map(function (t) { return t.count; }); };
}
exports.getCount = getCount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3ljbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsMEJBQTRCO0FBRzVCLDBEQUF5RDtBQVl6RCxJQUFNLFlBQVksR0FBZ0I7SUFDaEMsUUFBUSxFQUFFLEVBQUU7SUFDWixLQUFLLEVBQUUsQ0FBQztJQUNSLElBQUksRUFBRSxJQUFJLElBQUk7SUFDZCxNQUFNLEVBQUUsS0FBSztJQUNiLEdBQUcsRUFBRSxFQUFFO0lBQ1AsSUFBSSxFQUFFLElBQUk7Q0FDWCxDQUFBO0FBRUQsVUFBVTtBQUNWLGdCQUF1QixLQUFpQyxFQUFFLEVBQXlCO0lBQTVELHNCQUFBLEVBQUEsb0JBQWlDO1FBQUksY0FBSSxFQUFFLG9CQUFPO0lBQ3ZFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDYixLQUFLLDZCQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTlCLEtBQUssNkJBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNuQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsSUFBSSxZQUFJLEdBQUMsT0FBTyxDQUFDLEVBQUUsSUFBRyxPQUFPLE1BQUcsQ0FBQztZQUN0RSxJQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsRUFBRSxTQUFLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUM7UUFDekcsQ0FBQztRQUVELEtBQUssNkJBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNqQyxJ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fSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3RvcmUsIEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQ3ljbGVzTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY3ljbGUubW9kZWwnO1xuaW1wb3J0IHsgQ3ljbGVzQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvY3ljbGVzLmFjdGlvbic7XG5cbmV4cG9ydCB0eXBlIEN5Y2xlc0RhdGEgPSB7IFtpZDogbnVtYmVyXTogQ3ljbGVzTW9kZWwgfTtcbmV4cG9ydCBpbnRlcmZhY2UgQ3ljbGVzU3RhdGUge1xuICBzZWxlY3RlZDogc3RyaW5nO1xuICBkYXRlOiBEYXRlO1xuICBzdGF0dXM6IGJvb2xlYW47XG4gIGlkczogbnVtYmVyW107XG4gIGRhdGE6IEN5Y2xlc0RhdGE7XG4gIGNvdW50OiBudW1iZXI7XG59XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogQ3ljbGVzU3RhdGUgPSB7XG4gIHNlbGVjdGVkOiAnJyxcbiAgY291bnQ6IDAsXG4gIGRhdGU6IG5ldyBEYXRlLFxuICBzdGF0dXM6IGZhbHNlLFxuICBpZHM6IFtdLFxuICBkYXRhOiBudWxsLFxufVxuXG4vLyBSZWR1Y2VyXG5leHBvcnQgZnVuY3Rpb24gY3ljbGVzKHN0YXRlOiBDeWNsZXNTdGF0ZSA9IGluaXRpYWxTdGF0ZSwgeyB0eXBlLCBwYXlsb2FkIH06IEFjdGlvbik6IEN5Y2xlc1N0YXRlIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBDeWNsZXNBY3Rpb25zLlNFTEVDVDogeyB9XG5cbiAgICBjYXNlIEN5Y2xlc0FjdGlvbnMuQ1JFQVRFX0NPTVBMRVRFOiB7XG4gICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuZGF0YSwgeyBbcGF5bG9hZC5pZF06IHBheWxvYWQgfSk7XG4gICAgICBjb25zdCBpZHMgPSBbcGF5bG9hZC5pZCwgLi4uc3RhdGUuaWRzXTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBkYXRlOiBwYXlsb2FkLmRhdGUsIHNlbGVjdGVkOiBwYXlsb2FkLmlkLCBzdGF0dXM6IHRydWUsIGlkcywgZGF0YSB9KTtcbiAgICB9XG5cbiAgICBjYXNlIEN5Y2xlc0FjdGlvbnMuSU5JVF9DT01QTEVURToge1xuICAgICAgY29uc3QgaWRzID0gcGF5bG9hZC5tYXAoZGF0YSA9PiBkYXRhLmlkKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBfLm1hcEtleXMocGF5bG9hZCwgJ2lkJykgYXMgQ3ljbGVzRGF0YTtcblxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7IHN0YXR1czogZmFsc2UsIGNvdW50OiBpZHMubGVuZ3RoLCBpZHMsIGRhdGEgfSk7XG4gICAgfVxuXG4gICAgZGVmYXVsdDogcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5cbi8vIFNlbGVjdG9yc1xuZXhwb3J0IGZ1bmN0aW9uIGdldElkcygpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q3ljbGVzU3RhdGU+KSA9PiBkaWFyeSQubWFwKHQgPT4gdC5pZHMpLmZpbHRlcihpZHMgPT4gISFpZHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGEoaWRzKSB7XG4gIHJldHVybiAoZGlhcnkkOiBPYnNlcnZhYmxlPEN5Y2xlc1N0YXRlPikgPT4gZGlhcnkkXG4gICAgLm1hcCh0ID0+IHQuZGF0YSlcbiAgICAuZmlsdGVyKGRhdGEgPT4gZGF0YSAhPT0gbnVsbClcbiAgICAubWFwKGRhdGEgPT4gaWRzLm1hcChpZCA9PiBkYXRhW2lkXSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGVkSWQoKSB7XG4gIHJldHVybiAoZGlhcnkkOiBPYnNlcnZhYmxlPEN5Y2xlc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuc2VsZWN0ZWQpLmZpbHRlcihzID0+ICEhcy5sZW5ndGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGVkRGF0ZSgpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q3ljbGVzU3RhdGU+KSA9PiBkaWFyeSQubWFwKHQgPT4gdC5kYXRlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RlZCgpIHtcbiAgcmV0dXJuIChkaWFyeSQ6IE9ic2VydmFibGU8Q3ljbGVzU3RhdGU+KSA9PiBkaWFyeSQuZmlsdGVyKHMgPT4gISFzLmlkcy5sZW5ndGgpLm1hcCh0ID0+IHQuZGF0YVt0LnNlbGVjdGVkXSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q291bnQoKSB7XG4gIHJldHVybiAoZGlhcnkkOiBPYnNlcnZhYmxlPEN5Y2xlc1N0YXRlPikgPT4gZGlhcnkkLm1hcCh0ID0+IHQuY291bnQpO1xufVxuIl19