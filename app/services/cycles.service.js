"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
require("rxjs/Rx");
var sign = 'â‚¦';
var round = function (num) { return +(Math.round(+(num + 'e+2')) + 'e-2'); };
var rand = function () { return (Math.random() * 10000); };
var rand2 = function () { return Math.floor(Math.random() * 10000); };
var CyclesService = (function () {
    function CyclesService() {
    }
    CyclesService.prototype.count = function () {
        return 0;
    };
    CyclesService.prototype.create = function (_a) {
        var budget = _a.budget;
        return Observable_1.Observable.of({
            id: rand2(),
            sign: sign,
            categories: [],
            expense: this.format(0),
            budget: this.format(budget),
            created: new Date
        });
    };
    CyclesService.prototype.format = function (input) {
        var suffix = input > 1000000 ? 'M' : 'K';
        var count = round(+input);
        return { count: count, suffix: suffix };
    };
    CyclesService.prototype.fetch = function (params) {
        var _this = this;
        return Observable_1.Observable.of(5).map(function (i) {
            var data = [];
            var id = rand2();
            for (i; i > 0; i--) {
                var expense = _this.format(rand());
                var budget = _this.format(rand());
                var categories = [];
                for (var j = 10; j > 0; j--) {
                    var id_2 = rand().toFixed(0), name_1 = 'Category_' + id_2, value = rand().toFixed(2);
                    categories.push({ id: id_2, name: name_1, value: value, created: new Date() });
                }
                data.push({ id: id, sign: sign, categories: categories, expense: expense, budget: budget, created: new Date });
            }
            return data;
        });
    };
    return CyclesService;
}());
CyclesService = __decorate([
    core_1.Injectable()
], CyclesService);
exports.CyclesService = CyclesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjeWNsZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyw4Q0FBNkM7QUFDN0MsbUJBQWlCO0FBSWpCLElBQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUNqQixJQUFNLEtBQUssR0FBRyxVQUFDLEdBQUcsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBSSxLQUFLLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQztBQUM5RCxJQUFNLElBQUksR0FBRyxjQUFNLE9BQUEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQXZCLENBQXVCLENBQUM7QUFDM0MsSUFBTSxLQUFLLEdBQUcsY0FBTSxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFqQyxDQUFpQyxDQUFDO0FBR3RELElBQWEsYUFBYTtJQUExQjtJQTRDQSxDQUFDO0lBMUNDLDZCQUFLLEdBQUw7UUFDRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELDhCQUFNLEdBQU4sVUFBTyxFQUFVO1lBQVIsa0JBQU07UUFDYixNQUFNLENBQUMsdUJBQVUsQ0FBQyxFQUFFLENBQUM7WUFDbkIsRUFBRSxFQUFFLEtBQUssRUFBRTtZQUNYLElBQUksTUFBQTtZQUNKLFVBQVUsRUFBRSxFQUFFO1lBQ2QsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMzQixPQUFPLEVBQUUsSUFBSSxJQUFJO1NBQ2xCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw4QkFBTSxHQUFOLFVBQU8sS0FBSztRQUNWLElBQU0sTUFBTSxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QixNQUFNLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCw2QkFBSyxHQUFMLFVBQU0sTUFBTTtRQUFaLGlCQW9CQztRQW5CQyxNQUFNLENBQUMsdUJBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztZQUMzQixJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7WUFDaEIsSUFBTSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUM7WUFFbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDbkIsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQyxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ25DLElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztnQkFFdEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDNUIsSUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQUksR0FBRyxXQUFXLEdBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25GLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksUUFBQSxFQUFFLEtBQUssT0FBQSxFQUFFLE9BQU8sRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDbEUsQ0FBQztnQkFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsVUFBVSxZQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsT0FBTyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztZQUMxRSxDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTVDRCxJQTRDQztBQTVDWSxhQUFhO0lBRHpCLGlCQUFVLEVBQUU7R0FDQSxhQUFhLENBNEN6QjtBQTVDWSxzQ0FBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcbmltcG9ydCBcInJ4anMvUnhcIjtcblxuaW1wb3J0IHsgQ3ljbGVzTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY3ljbGUubW9kZWwnO1xuXG5jb25zdCBzaWduID0gJ+KCpic7XG5jb25zdCByb3VuZCA9IChudW0pID0+ICsoTWF0aC5yb3VuZCgrKG51bSArICdlKzInKSkgICsgJ2UtMicpO1xuY29uc3QgcmFuZCA9ICgpID0+IChNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuY29uc3QgcmFuZDIgPSAoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDeWNsZXNTZXJ2aWNlIHtcblxuICBjb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgY3JlYXRlKHsgYnVkZ2V0IH0pOiBPYnNlcnZhYmxlPEN5Y2xlc01vZGVsPiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUub2Yoe1xuICAgICAgaWQ6IHJhbmQyKCksXG4gICAgICBzaWduLFxuICAgICAgY2F0ZWdvcmllczogW10sXG4gICAgICBleHBlbnNlOiB0aGlzLmZvcm1hdCgwKSxcbiAgICAgIGJ1ZGdldDogdGhpcy5mb3JtYXQoYnVkZ2V0KSxcbiAgICAgIGNyZWF0ZWQ6IG5ldyBEYXRlXG4gICAgfSk7XG4gIH1cblxuICBmb3JtYXQoaW5wdXQpIHtcbiAgICBjb25zdCBzdWZmaXggPSBpbnB1dCA+IDEwMDAwMDAgPyAnTScgOiAnSyc7XG4gICAgY29uc3QgY291bnQgPSByb3VuZCgraW5wdXQpO1xuICAgIHJldHVybiB7IGNvdW50LCBzdWZmaXggfTtcbiAgfVxuXG4gIGZldGNoKHBhcmFtcyk6IE9ic2VydmFibGU8Q3ljbGVzTW9kZWxbXT4ge1xuICAgIHJldHVybiBPYnNlcnZhYmxlLm9mKDUpLm1hcChpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgIGNvbnN0IGlkID0gcmFuZDIoKTtcblxuICAgICAgZm9yIChpOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGV4cGVuc2UgPSB0aGlzLmZvcm1hdChyYW5kKCkpO1xuICAgICAgICBjb25zdCBidWRnZXQgPSB0aGlzLmZvcm1hdChyYW5kKCkpO1xuICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaiA9IDEwOyBqID4gMDsgai0tKSB7XG4gICAgICAgICAgY29uc3QgaWRfMiA9IHJhbmQoKS50b0ZpeGVkKDApLCBuYW1lID0gJ0NhdGVnb3J5XycraWRfMiwgdmFsdWUgPSByYW5kKCkudG9GaXhlZCgyKTtcbiAgICAgICAgICBjYXRlZ29yaWVzLnB1c2goeyBpZDogaWRfMiwgbmFtZSwgdmFsdWUsIGNyZWF0ZWQ6IG5ldyBEYXRlKCkgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLnB1c2goeyBpZCwgc2lnbiwgY2F0ZWdvcmllcywgZXhwZW5zZSwgYnVkZ2V0LCBjcmVhdGVkOiBuZXcgRGF0ZSB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSlcbiAgfVxufVxuIl19